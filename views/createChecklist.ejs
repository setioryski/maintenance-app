<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Buat Checklist Baru</title>
  <!-- Tailwind CSS (CDN) -->
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

  <script>
    // 1. Show or hide "Expected Unit" based on whether "Measurement" is selected
    function toggleExpectedUnit(selectElem, rowElem) {
      const expectedUnitInput = rowElem.querySelector('input[name="taskExpectedUnits"]');
      if (selectElem.value === 'measurement') {
        expectedUnitInput.classList.remove('hidden');
      } else {
        expectedUnitInput.classList.add('hidden');
        expectedUnitInput.value = ''; // Clear leftover text
      }
    }

    // 2. Remove a task row
    function removeTask(button) {
      const row = button.closest('.task-row');
      row.remove();
    }

    // 3. Create a single task row in the DOM
    function createTaskRow(task = {}) {
      // task might have: { description, inputType, expectedUnit, ... }
      const row = document.createElement('div');
      row.className = "task-row flex items-center gap-2 mb-2";

      // We'll read these from 'task' if present, otherwise use defaults
      const desc = task.description || '';
      const type = task.inputType || 'visual';
      const expUnit = task.expectedUnit || '';

      row.innerHTML = `
        <input
          type="text"
          name="taskDescriptions"
          placeholder="Masukkan item inspeksi"
          class="flex-1 border border-gray-300 rounded p-2"
          value="${desc}"
          required
        />

        <select
          name="taskInputTypes"
          class="border border-gray-300 rounded p-2"
          required
        >
          <option value="visual" ${type === 'visual' ? 'selected' : ''}>Visual Check</option>
          <option value="measurement" ${type === 'measurement' ? 'selected' : ''}>Measurement</option>
          <option value="functional" ${type === 'functional' ? 'selected' : ''}>Functional Test</option>
        </select>

        <input
          type="text"
          name="taskExpectedUnits"
          placeholder="Expected Unit"
          class="border border-gray-300 rounded p-2 w-28 ${type === 'measurement' ? '' : 'hidden'}"
          value="${expUnit}"
        />

        <button
          type="button"
          class="bg-red-500 text-white px-3 py-2 rounded"
        >
          Hapus
        </button>
      `;

      // Hook up event listeners for the new row
      const selectElem = row.querySelector('select[name="taskInputTypes"]');
      const removeBtn = row.querySelector('button');

      // Toggle expected unit on load (in case type is 'measurement') 
      toggleExpectedUnit(selectElem, row);

      // When user changes the input type
      selectElem.addEventListener('change', () => toggleExpectedUnit(selectElem, row));

      // When user clicks "Hapus"
      removeBtn.addEventListener('click', () => removeTask(removeBtn));

      return row;
    }

    // 4. Dynamically add a blank new task row
    function addTask() {
      const taskList = document.getElementById('taskList');
      const row = createTaskRow(); // no task object => blank
      taskList.appendChild(row);
    }

    // 5. Load tasks from the selected template checklist
    async function loadTemplateTasks(selectElem) {
      const checklistId = selectElem.value;
      if (!checklistId) {
        // If no template is selected, do nothing (or clear tasks)
        return;
      }

      try {
        const response = await fetch(`/api/checklists/${checklistId}/tasks`);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const tasks = await response.json();

        // Clear current tasks
        const taskList = document.getElementById('taskList');
        taskList.innerHTML = '';

        // Populate with tasks from the template
        tasks.forEach(task => {
          const row = createTaskRow(task);
          taskList.appendChild(row);
        });

      } catch (err) {
        console.error('Error loading template tasks:', err);
      }
    }
  </script>
</head>
<body class="bg-gray-100">
  <div class="max-w-2xl mx-auto mt-8 p-4 bg-white shadow-md rounded">
    <h1 class="text-xl font-bold mb-6">Buat Checklist Baru</h1>

    <form action="/checklists" method="POST">
      <!-- Nama Checklist -->
      <div class="mb-4">
        <label class="block text-gray-700 font-semibold mb-1">Nama Checklist</label>
        <input
          type="text"
          name="title"
          class="w-full border border-gray-300 rounded p-2"
          required
        />
      </div>

      <!-- Pilih Checklist (Template) -->
      <div class="mb-4">
        <label class="block text-gray-700 font-semibold mb-1">Pilih Checklist (Template)</label>
        <select
          name="templateChecklist"
          class="w-full border border-gray-300 rounded p-2"
          onchange="loadTemplateTasks(this)"
        >
          <option value="">-- Pilih Checklist --</option>
          <% existingChecklists.forEach(function(ch) { %>
            <option value="<%= ch._id %>"><%= ch.title %></option>
          <% }); %>
        </select>
      </div>

      <!-- Item Inspeksi Header + Tambah Item Button -->
      <div class="flex items-center justify-between mb-2">
        <label class="text-gray-700 font-semibold">Item Inspeksi</label>
        <button
          type="button"
          class="bg-green-500 text-white px-4 py-2 rounded"
          onclick="addTask()"
        >
          + Tambah Item
        </button>
      </div>

      <!-- Task Rows Container -->
      <div id="taskList" class="mb-4">
        <!-- By default, show one blank row -->
        <div class="task-row flex items-center gap-2 mb-2">
          <input
            type="text"
            name="taskDescriptions"
            placeholder="Masukkan item inspeksi"
            class="flex-1 border border-gray-300 rounded p-2"
            required
          />
          <select
            name="taskInputTypes"
            class="border border-gray-300 rounded p-2"
            onchange="toggleExpectedUnit(this, this.closest('.task-row'))"
            required
          >
            <option value="visual">Visual Check</option>
            <option value="measurement">Measurement</option>
            <option value="functional">Functional Test</option>
          </select>
          <input
            type="text"
            name="taskExpectedUnits"
            placeholder="Expected Unit"
            class="border border-gray-300 rounded p-2 w-28 hidden"
          />
          <button
            type="button"
            class="bg-red-500 text-white px-3 py-2 rounded"
            onclick="removeTask(this)"
          >
            Hapus
          </button>
        </div>
      </div>

      <!-- Simpan Checklist -->
      <button
        type="submit"
        class="bg-blue-600 text-white px-4 py-2 rounded"
      >
        Simpan Checklist
      </button>
    </form>
  </div>
</body>
</html>
